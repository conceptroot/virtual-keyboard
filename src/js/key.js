const UPPER = true
export class Key {
    constructor (key_config, lang) {
        this.id = key_config.id
        this.layers = key_config.layers // dict
        this.listner = "TODO"
        this.lang = lang  // ru, en
        this.style = key_config.style // primary, secondary
        this.html = null
        this.shifted = false
        this.init()
    }
    init() {
        this.createElement()
        this.initEventlistners()
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    updateKeyModifiers(lang, shifted) {
        this.lang = lang
        this.shifted = shifted
        if (this.layers[lang]) {
            this.html.textContent = this.layers[lang]
        } else {
            this.html.textContent = this.layers['en']
        }
    }
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    renderPress() {
        this.html.classList.toggle('key_press')
        setTimeout(e => {
            this.html.classList.toggle('key_press')
        }, 300)
    }
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    emitVirtualPressEvent(){
        console.log('üî• –ó–∞–ø—É—Å–∫–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:', this.id)
        let key
        if (this.id.startsWith('Key')) {
            if (this.lang === 'en') {
                key = this.layers['en']
            } else if (this.lang === 'ru') {
                key = this.layers['ru']
            } else {
                key = '–æ—à–∏–±–∫–∞'
            }
            if (UPPER) {
                key = key.toUpperCase()
            }
        }
        const virtual_kb_press_event = new CustomEvent(
            "virtual_kb_press", 
            {
                bubbles: true,
                detail: {
                    id: this.id,
                    key: key
                }
            })
        this.html.dispatchEvent(virtual_kb_press_event)

    }
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
    emitChangeLangEvent() {
        const change_lang_event = new CustomEvent(
            "change_lang",
            {
                bubbles: true,
                
            }
        )
        this.html.dispatchEvent(change_lang_event)
        
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –ö–Ω–æ–ø–æ–∫
    initEventlistners() {
        if (this.id === "Lang") { 
            this.html.addEventListener('click', (e) => {
                this.emitChangeLangEvent()
                this.renderPress()
            })
            return
        }

        this.html.addEventListener('click', e => {
            console.log('—è —Ç—É—Ç–∞')
            // if (this.id !== e.code) return
            this.emitVirtualPressEvent()
            this.renderPress()
            console.log('–∫–ª–∏–∫–Ω—É—Ç–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–≤–ø–∞–ª–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º Key:', this.id)
            
        })
        document.body.addEventListener('keydown', e => {
            if (this.id !== e.code) return
            this.emitVirtualPressEvent()
            this.renderPress()
            console.log('–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–≤–ø–∞–ª–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º Key:', this.id)
        })
        
    }

    createElement() {
        const key = document.createElement('div')
        key.setAttribute('id', this.id)
        key.classList.add('key')
        if (this.style === 'primary') {
            key.classList.add('key_primary')
        } else if (this.style === 'secondary') {
            key.classList.add('key_secondary')
        }
        this.html = key
        if (this.layers[this.lang]) {
            this.html.textContent = this.layers[this.lang]
        } else {
            this.html.textContent = this.layers['en']
        }
    }
}

