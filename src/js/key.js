export class Key {
    constructor (key_config, key_values, lang, shifted=false) {
        this.id = key_config.id
        this.layers = key_config.layers // dict
        this.key_values = key_values
        this.lang = lang  // ru, en
        this.style = key_config.style // primary, secondary
        this.html = null
        this.shifted = shifted
        this.init()
    }
    init() {
        this.createElement()
        this.initEventlistners()
    }

    isPrintableKey() {
        if (this.id.startsWith('Key')) return true
        if (this.id.startsWith('Digit')) return true
        const printKeys = [
            "Quote",
            "Period",
            "Comma",
            "Slash",
            "Semicolon"
        ]
        if (printKeys.indexOf(this.id) !== -1) return true
        return false
    }
    isEditKey() {
        const editKeys = [
            "Enter",
            "Space", 
            "Backspace"
        ]
        if (editKeys.indexOf(this.id) !== -1) return true
        return false
    }
    isShiftKey() {
        if (this.id === "ShiftLeft") return true
        if (this.id === "ShiftRight") return true
        return false
    }
    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
    updateKeyText(lang, shifted) {
        this.lang = lang
        this.shifted = shifted
        const symbol = this.getSymbol()
        this.html.textContent = symbol
    }
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏
    renderPress() {
        this.html.classList.toggle('key_press')
        setTimeout(e => {
            this.html.classList.toggle('key_press')
        }, 300)
    }
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    renderPressDown() {
        this.html.classList.add('key_press')
    }
    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    renderPressUp() {
        this.html.classList.remove('key_press')
    }
    // –ü–æ–ª—É—á–∏—Ç—å symbol –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≤–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–∞—Ä–µ—é
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    getSymbol() {
        let symbols, symbol
        try {
            if (this.key_values[this.lang]) { // –µ—Å—Ç—å –ª–∏ –≤ –ª—ç–π–∞—É—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ª–æ–π
                symbols = this.key_values[this.lang]
            } else { // –µ—Å–ª–∏ —Å–ª–æ—è –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏
                symbols = this.key_values['en']
            }
            if (this.shifted) {
                symbol = symbols[1] || symbols[0] 
            } else {
                symbol = symbols[0]
            }
        }
        catch (e) {
            symbol = "üí©"
            console.warn('–í —Ñ–∞–π–ª–µ key_apperance.json –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è:', this.id)
        }
        return symbol
    }
    emitVirtualPressEvent(){
        console.log('üî• –ó–∞–ø—É—Å–∫–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:', this.id)
        const symbol = this.getSymbol()
        const virtual_kb_press_event = new CustomEvent(
            "virtual_kb_press", 
            {
                bubbles: true,
                detail: {
                    id: this.id,
                    symbol: symbol
                }
            })
        this.html.dispatchEvent(virtual_kb_press_event)

    }
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
    emitChangeLangEvent() {
        const change_lang_event = new CustomEvent(
            "change_lang",
            {
                bubbles: true,
                
            }
        )
        this.html.dispatchEvent(change_lang_event)
        
    }
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –Ω–∞–∂–∞–ª–∏ —à–∏—Ñ—Ç
    emitShiftEvent() {
        const virtual_shift_event = new CustomEvent(
            'shift_event',
            {
                bubbles: true,
                detail: {
                    isShifted: true
                }
            })
        this.html.dispatchEvent(virtual_shift_event)
    }
    // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –æ—Ç–∂–∞–ª–∏ —à–∏—Ñ—Ç
    emitUnshiftEvent() {
        const virtual_unshift_event = new CustomEvent(
            'unshift_event',
            {
                bubbles: true,
                detail: {
                    isShifted: false
                }
            })
        this.html.dispatchEvent(virtual_unshift_event)
    }

    // –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    // –í—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ Keyboard
    emitAndRenderKeyUp() {
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —à–∏—Ñ—Ç –æ—Ç–∂–∞–ª–∏
        if (this.isShiftKey()) { 
            console.log('–≠—Ç–æ —à–∏—Ñ—Ç. –û—Ç–∂–∞—Ç!!!', this.id, this.shifted)
            this.emitUnshiftEvent()
            this.renderPressUp()
            return
        }
    }
    
    // –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    // –í—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ Keyboard
    emitAndRenderKeyDown() {
        console.log("~~~~> emitAndRenderKey. this.id", this.id )
        console.log("~~~~> emitAndRenderKey. isPrintable?", this.isPrintableKey() )
        console.log("~~~~> emitAndRenderKey. isEditKey?", this.isEditKey() )
        console.log("~~~~> emitAndRenderKey. isShift?", this.isShiftKey() )
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        if (this.isPrintableKey() || this.isEditKey()) { 
            this.emitVirtualPressEvent()
            this.renderPress()
            return
        } 
        // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —à–∏—Ñ—Ç –Ω–∞–∂–∞–ª–∏
        if (this.isShiftKey()) { 
            console.log('–≠—Ç–æ —à–∏—Ñ—Ç –Ω–∞–∂–∞—Ç!!!', this.id, this.shifted)
            this.emitShiftEvent()
            this.renderPressDown()
            return
        }

    }
    // –õ–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
    addEventListnerLanguage() {
        this.html.addEventListener('click', (e) => {
            this.emitChangeLangEvent()
            this.renderPress()
        })
    }
    // –õ–∏—Å—Ç–Ω–µ—Ä –¥–ª—è —à–∏—Ñ—Ç–∞
    addEventListenerShift() {
        console.log('this.id====>>>>>', this.id)
        this.html.addEventListener("click", e => {
            console.log("press shift")
            this.renderPress()
        })
    }
    // –ª–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∫–∫–Ω–æ–ø–æ–∫, —ç–Ω—Ç–µ—Ä, –ø—Ä–æ–±–µ–ª –±—ç–∫—Å–ø—ç–π—Å
    addEventListenerCommonKeys() {
        this.html.addEventListener('click', e => {
            this.emitVirtualPressEvent()
            this.renderPress()
            console.log('–∫–ª–∏–∫–Ω—É—Ç–∞—è –∫–Ω–æ–ø–∫–∞ —Å–æ–≤–ø–∞–ª–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º Key:', this.id)
        })
    }
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –ö–Ω–æ–ø–æ–∫, —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –º—ã—à–∏
    initEventlistners() {
        // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
        if (this.id === "Lang") { 
            this.addEventListnerLanguage()
            return
        }
        // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∏—Ñ—Ç–∞
        if (this.id === "ShiftLeft" || this.id === "ShiftRight") {
            this.addEventListenerShift()
        }
        // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        this.addEventListenerCommonKeys()
    }

    createElement() {
        const key = document.createElement('div')
        key.setAttribute('id', this.id)
        key.classList.add('key')
        if (this.style === 'primary') {
            key.classList.add('key_primary')
        } else if (this.style === 'secondary') {
            key.classList.add('key_secondary')
        } else if (this.style === 'invisible') {
            key.classList.add('key_invisible')
        }
        this.html = key

        // –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–∏–º–≤–æ–ª
        this.updateKeyText(this.lang, this.shifted)
    }
}

