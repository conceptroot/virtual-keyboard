export default class Key {
  constructor(keyConfig, keyValues, lang, shifted = false) {
    this.id = keyConfig.id;
    this.layers = keyConfig.layers; // dict
    this.key_values = keyValues;
    this.lang = lang; // ru, en
    this.style = keyConfig.style; // primary, secondary
    this.size = keyConfig.size;
    this.html = null;
    this.shifted = shifted;
    this.init();
  }

  init() {
    this.createElement();
    this.initEventlistners();
  }

  isCapsKey() {
    if (this.id === 'CapsLock') return true;
    return false;
  }

  isControlKey() {
    const controlKeys = [
      'ControlLeft',
      'ControlRight',
      'AltLeft',
      'AltRight',
      'MetaLeft',
      'MetaRight',
      'Escape',
      'Tab',
      'Delete',
      'ArrowUp',
      'ArrowDown',
      'ArrowLeft',
      'ArrowRight',
    ];
    if (controlKeys.indexOf(this.id) !== -1) return true;
    return false;
  }

  isPrintableKey() {
    if (this.id.startsWith('Key')) return true;
    if (this.id.startsWith('Digit')) return true;
    const printKeys = [
      'Quote',
      'Period',
      'Comma',
      'Slash',
      'Semicolon',
    ];
    if (printKeys.indexOf(this.id) !== -1) return true;
    return false;
  }

  isEditKey() {
    const editKeys = [
      'Enter',
      'Space',
      'Backspace',
    ];
    if (editKeys.indexOf(this.id) !== -1) return true;
    return false;
  }

  isShiftKey() {
    if (this.id === 'ShiftLeft') return true;
    if (this.id === 'ShiftRight') return true;
    return false;
  }

  // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
  updateKeyText(lang, shifted) {
    this.lang = lang;
    this.shifted = shifted;
    const symbol = this.getSymbol();
    this.html.textContent = symbol;
  }

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏
  renderPress() {
    this.html.classList.toggle('key_press');
    setTimeout(() => {
      this.html.classList.toggle('key_press');
    }, 300);
  }

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  renderPressDown() {
    this.html.classList.add('key_press');
  }

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
  renderPressUp() {
    this.html.classList.remove('key_press');
  }

  // –ü–æ–ª—É—á–∏—Ç—å symbol –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ –∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≤–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–∞—Ä–µ—é
  // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
  getSymbol() {
    let symbols; let
      symbol;
    try {
      if (this.key_values[this.lang]) { // –µ—Å—Ç—å –ª–∏ –≤ –ª—ç–π–∞—É—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ª–æ–π
        symbols = this.key_values[this.lang];
      } else { // –µ—Å–ª–∏ —Å–ª–æ—è –Ω–µ—Ç, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–∏
        symbols = this.key_values.en;
      }
      if (this.shifted) {
        symbol = symbols[1] || symbols[0];
      } else {
        [symbol] = symbols;
      }
    } catch (e) {
      symbol = 'üí©';
      // console.warn('–í —Ñ–∞–π–ª–µ key_apperance.json –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è:', this.id);
    }
    return symbol;
  }

  emitVirtualPressEvent() {
    // console.log('üî•üî•üî• –ó–∞–ø—É—Å–∫–∞—é –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∏–≤–µ–Ω—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏:', this.id);
    const symbol = this.getSymbol();
    const virtualKbPressEvent = new CustomEvent(
      'virtual_kb_press',
      {
        bubbles: true,
        detail: {
          id: this.id,
          symbol,
        },
      },
    );
    this.html.dispatchEvent(virtualKbPressEvent);
  }

  // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –Ω–∞–¥–æ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫
  emitChangeLangEvent() {
    const changeLangEvent = new CustomEvent(
      'change_lang',
      {
        bubbles: true,

      },
    );
    this.html.dispatchEvent(changeLangEvent);
  }

  // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –Ω–∞–∂–∞–ª–∏ —à–∏—Ñ—Ç
  emitShiftEvent() {
    const virtualShiftEvent = new CustomEvent(
      'shift_event',
      {
        bubbles: true,
        detail: {
          isShifted: true,
        },
      },
    );
    this.html.dispatchEvent(virtualShiftEvent);
  }

  // –ó–∞–ø—É—Å–∫ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∏–≤–µ–Ω—Ç–∞, —á—Ç–æ –æ—Ç–∂–∞–ª–∏ —à–∏—Ñ—Ç
  emitUnshiftEvent() {
    const virtualUnshiftEvent = new CustomEvent(
      'unshift_event',
      {
        bubbles: true,
        detail: {
          isShifted: false,
        },
      },
    );
    this.html.dispatchEvent(virtualUnshiftEvent);
  }

  // –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∂–∞—Ç–∏–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  // –í—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ Keyboard
  emitAndRenderKeyUp() {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —à–∏—Ñ—Ç –æ—Ç–∂–∞–ª–∏
    if (this.isShiftKey()) {
      // console.log('–≠—Ç–æ —à–∏—Ñ—Ç. –û—Ç–∂–∞—Ç!!!', this.id, this.shifted);
      this.emitUnshiftEvent();
      this.renderPressUp();
    }
  }

  // –î–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
  // –í—ã–∑–æ–≤ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∏–∑ –∫–ª–∞—Å—Å–∞ Keyboard
  emitAndRenderKeyDown() {
    // console.log('~~~~> emitAndRenderKey. this.id', this.id);
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    if (this.isPrintableKey() || this.isEditKey()) {
      this.emitVirtualPressEvent();
      this.renderPress();
      return;
    }
    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —à–∏—Ñ—Ç –Ω–∞–∂–∞–ª–∏
    if (this.isShiftKey()) {
      // console.log('–≠—Ç–æ —à–∏—Ñ—Ç –Ω–∞–∂–∞—Ç!!!', this.id, this.shifted);
      this.emitShiftEvent();
      this.renderPressDown();
      return;
    }
    if (this.isCapsKey()) {
      if (this.shifted) {
        this.emitUnshiftEvent();
        this.renderPressUp();
        // console.log('this.shifted remove ------>');
        return;
      }
      this.emitShiftEvent();
      this.renderPressDown();
      return;
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    if (this.isControlKey()) {
      this.renderPress();
    }
  }

  // –õ–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –∫–ª–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞
  addEventListnerLanguage() {
    this.html.addEventListener('click', () => {
      this.emitChangeLangEvent();
      this.renderPress();
    });
  }

  // –õ–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –∫–ª–∏–∫–∞ —à–∏—Ñ—Ç–∞
  addEventListenerShift() {
    this.html.addEventListener('click', () => {
      // console.log('–≠—Ç–æ —à–∏—Ñ—Ç –Ω–∞–∂–∞—Ç!!!', this.id, this.shifted);
      this.renderPressDown();
      this.emitShiftEvent();
      setTimeout(() => {
        this.renderPressUp();
        this.emitUnshiftEvent();
      }, 2000);
    });
  }

  // –õ–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –∫–ª–∏–∫–∞ –Ω–∞ –∫–∞–ø—Å
  addEventListenerCaps() {
    this.html.addEventListener('click', () => {
      if (this.shifted) {
        this.emitUnshiftEvent();
        this.renderPressUp();
        return;
      }
      this.emitShiftEvent();
      this.renderPressDown();
    });
  }

  // –ª–∏—Å—Ç–Ω–µ—Ä –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∫–∫–Ω–æ–ø–æ–∫, —ç–Ω—Ç–µ—Ä, –ø—Ä–æ–±–µ–ª –±—ç–∫—Å–ø—ç–π—Å
  addEventListenerCommonKeys() {
    this.html.addEventListener('click', () => {
      this.renderPress();
      // –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –æ–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞
      if (this.isPrintableKey() || this.isEditKey()) {
        this.emitVirtualPressEvent();
      }
    });
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—Å—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –ö–Ω–æ–ø–æ–∫, —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–ª–∏–∫ –º—ã—à–∏
  initEventlistners() {
    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —è–∑—ã–∫–∞
    if (this.id === 'Lang') {
      this.addEventListnerLanguage();
      return;
    }
    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —à–∏—Ñ—Ç–∞
    if (this.isShiftKey()) { // this.id === "ShiftLeft" || this.id === "ShiftRight") {
      this.addEventListenerShift();
    }
    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–ø—Å–∞
    if (this.isCapsKey()) {
      this.addEventListenerCaps();
    }
    // –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    if (this.isControlKey() || this.isPrintableKey() || this.isEditKey()) {
      this.addEventListenerCommonKeys();
    }
  }

  createElement() {
    const key = document.createElement('div');
    key.setAttribute('id', this.id);
    key.classList.add('key');
    if (this.style === 'primary') {
      key.classList.add('key_primary');
    } else if (this.style === 'secondary') {
      key.classList.add('key_secondary');
    } else if (this.style === 'invisible') {
      key.classList.add('key_invisible');
    }
    if (this.size === 'double') {
      key.classList.add('key_big');
    }
    this.html = key;

    // –æ—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–µ —Å–∏–º–≤–æ–ª
    this.updateKeyText(this.lang, this.shifted);
  }
}
